require("dotenv").config();
const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
const { default: axios } = require("axios");
const mongoose = require("mongoose");
const User = require("./User");
const { prompt, kzScripts, scripts } = require("./prompt");

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
    .connect("mongodb://localhost:27017/CargoBot")
    .then(() => {
        console.log("MongoDB OK");
    })
    .catch((err) => {
        console.error("MongoDB Error:", err);
    });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: [
            "--no-sandbox",
            "--disable-setuid-sandbox", 
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--disable-extensions",
            "--disable-background-timer-throttling",
            "--disable-backgrounding-occluded-windows",
            "--disable-renderer-backgrounding",
            "--disable-features=TranslateUI",
            "--disable-web-security",
            "--no-first-run",
            "--no-default-browser-check"
        ],
        timeout: 90000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–æ 90 —Å–µ–∫—É–Ω–¥
        defaultViewport: null,
    },
    webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
    }
});

client.on("qr", (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on("authenticated", () => {
    console.log("‚úÖ Authenticated successfully!");
});

client.on("auth_failure", (msg) => {
    console.error("‚ùå Authentication failed:", msg);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
client.on('loading_screen', (percent, message) => {
    console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ WhatsApp:', percent + '%', message);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
client.on('change_state', state => {
    console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', state);
});

client.on("disconnected", (reason) => {
    console.log("‚ùå Client was logged out:", reason);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.log("üîÑ Attempting to reconnect...");
        client.initialize();
    }, 5000);
});

client.on("ready", async () => {
    console.log("üöÄ Client is ready!");
    console.log("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
        const chats = await client.getChats();
        const groups = chats.filter(chat => chat.isGroup);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã (${groups.length}):`);
        
        groups.forEach((group, index) => {
            console.log(`${index + 1}. "${group.name}" - ID: ${group.id._serialized}`);
        });
        
        // –ò—â–µ–º –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
        const targetGroup = groups.find(group => 
            group.id._serialized === "120363378709019183@g.us" ||
            group.id._serialized.includes('120363378709019183') ||
            group.name === 'Cargo –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞' ||
            group.name?.toLowerCase().includes('cargo –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞')
        );
        
        if (targetGroup) {
            console.log(`‚úÖ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: "${targetGroup.name}" - ID: ${targetGroup.id._serialized}`);
        } else {
            console.log(`‚ö†Ô∏è –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å ID 120363378709019183@g.us –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            console.log(`üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É`);
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:", error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
client.on("message_create", async (msg) => {
    if (msg.fromMe) {
        const chatId = msg.to;
        try {
            if (msg.body === "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ú–µ–Ω—è –∑–æ–≤—É—Ç, –ì—É–ª—è. –Ø –º–µ–Ω–µ–¥–∂–µ—Ä Cargo525.") {
                let user = await User.findOne({ phone: chatId });
                if (user) {
                    user.status = true;
                    await user.save();
                } else {
                    user = new User({ phone: chatId, status: true });
                    await user.save();
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message_create:", error);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
client.on("message", async (msg) => {
    const chatId = msg.from;
    const message = msg.body;

    try {
        const contacts = await client.getContacts();
        const contactExists = contacts.find((contact) => contact.id._serialized === msg.from);
        let user = await User.findOne({ phone: chatId });

        if (contactExists?.name !== undefined || (user && user.status)) {
            console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º true, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.");
            return;
        }

        if (!message || message.trim() === "") {
            await client.sendMessage(chatId, "–ß—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ö–û–î. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ò–ú–Ø, –ì–û–†–û–î, –¢–ï–õ–ï–§–û–ù.");
            return;
        }

        if (!user) {
            user = new User({ phone: chatId });
            await user.save();
        }

        if (message) {
            const answer = await gptResponse(message);
            console.log("–û—Ç–≤–µ—Ç GPT:", answer);

            const isKZ = answer.toLowerCase().includes("kz");
            if (isKZ) {
                user.language = "kz";
                await user.save();
            }

            const match = answer.match(/\d+/g); // –ò—â–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä
            if (match) {
                const scriptIndex = parseInt(match[0], 10);
                const script = isKZ ? kzScripts[scriptIndex] : scripts[scriptIndex];

                if (scriptIndex === 7) {
                    const responseMessage = user.language === "kz"
                        ? "–ë—ñ–∑–¥—ñ“£ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–¥—ã, –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑."
                        : "–° –≤–∞–º–∏ –≤—ã–π–¥–µ—Ç –Ω–∞ —Å–≤—è–∑—å –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –ø—Ä–æ—Å–∏–º –æ–∂–∏–¥–∞—Ç—å.";
                    await client.sendMessage(chatId, responseMessage);
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                    await sendToGroup("120363378709019183@g.us", `–ö–ª–∏–µ–Ω—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º '${chatId.slice(0, -5)}' –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å wa.me//+${chatId.slice(0, -5)}`);
                    
                    user.status = true;
                    await user.save();
                } else if (scriptIndex === 6) {
                    const responseMessage = user.language === "kz"
                        ? "–ö“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑, –±—ñ–∑ —Å—ñ–∑–≥–µ –∫–æ–¥ —Ç–∞“ì–∞–π—ã–Ω–¥–∞–π–º—ã–∑."
                        : "–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–∏—Å–≤–æ–∏–º –≤–∞–º –∫–æ–¥.";
                    await client.sendMessage(chatId, responseMessage);
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                    await sendToGroup("120363378709019183@g.us", `–ö–ª–∏–µ–Ω—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º '${chatId.slice(0, -5)}' –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å wa.me//+${chatId.slice(0, -5)}`);
                    
                    user.status = true;
                    await user.save();
                } else {
                    if (script && Array.isArray(script)) {
                        for (const item of script) {
                            await client.sendMessage(chatId, item);
                        }
                    } else {
                        await client.sendMessage(chatId, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.");
                    }
                }
            } else {
                const responseMessage = user?.language === "kz"
                    ? "–°“±—Ä–∞“õ—Ç—ã —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º, –Ω–∞“õ—Ç—ã–ª–∞–ø –∂–∞–∑—Å–∞“£—ã–∑."
                    : "–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.";
                await client.sendMessage(chatId, responseMessage);
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        if (error.name === "ProtocolError" || error.message.includes("Target closed")) {
            console.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...");
            startClient();
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
const gptResponse = async (text) => {
    const messages = [
        {
            role: "system",
            content: prompt,
        },
        {
            role: "user",
            content: text,
        },
    ];

    try {
        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4o-mini",
                messages,
            },
            {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${OPENAI_API_KEY}`,
                },
            }
        );
        return response.data.choices[0].message.content;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ gptResponse:", error);
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ GPT.";
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
const sendToGroup = async (groupId, message) => {
    try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É ${groupId}`);
        
        // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ getChatById
        try {
            const groupChat = await client.getChatById(groupId);
            if (groupChat && groupChat.isGroup) {
                await groupChat.sendMessage(message);
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: ${groupChat.name || groupId}`);
                return true;
            }
        } catch (error1) {
            console.log(`‚ùå –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error1.message}`);
        }

        // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ getChats
        try {
            const chats = await client.getChats();
            const group = chats.find(chat => chat.id._serialized === groupId && chat.isGroup);
            
            if (group) {
                await group.sendMessage(message);
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: ${group.name || groupId}`);
                return true;
            } else {
                console.error(`‚ùå –ì—Ä—É–ø–ø–∞ —Å ID ${groupId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ —á–∞—Ç–æ–≤`);
            }
        } catch (error2) {
            console.log(`‚ùå –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error2.message}`);
        }

        // –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏
        try {
            const chats = await client.getChats();
            const groups = chats.filter(chat => chat.isGroup);
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.length}`);
            
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            groups.forEach(group => {
                console.log(`üìù –ì—Ä—É–ø–ø–∞: ${group.name} - ID: ${group.id._serialized}`);
            });
            
            // –ï—Å–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏ ID –∏–ª–∏ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
            const targetGroup = groups.find(group => 
                group.id._serialized.includes('120363378709019183') || 
                group.name === 'Cargo –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞' ||
                group.name?.toLowerCase().includes('cargo –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞') ||
                group.name?.toLowerCase().includes('cargo')
            );
            
            if (targetGroup) {
                await targetGroup.sendMessage(message);
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –ø–æ–∏—Å–∫—É: ${targetGroup.name}`);
                return true;
            }
            
        } catch (error3) {
            console.log(`‚ùå –ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error3.message}`);
        }

        console.error(`‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ${groupId} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏`);
        return false;
        
    } catch (error) {
        console.error(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É ${groupId}:`, error.message);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
async function startClient() {
    try {
        await client.initialize();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:", error);
        console.log("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
        setTimeout(startClient, 5000); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    }
}

// –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
startClient();